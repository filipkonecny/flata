nts parity;


is_odd {
  in n : int;
  out result : int;
  initial q0;
  final qf;
  q0 -> q1 { (n = 0) && havoc() }
  q1 -> qf { result' = 0 && havoc(result) }
  q0 -> q2 { (n > 0) && havoc() }
  q2 -> qf { result' = is_even(n-1) }
  q0 -> q3 { (n < 0) && havoc() }
  q3 -> qf { result' = is_even(n+1) }
}

is_even {
  in n : int;
  out result : int;
  initial q0;
  final qf;
  q0 -> q1 { (n = 0) && havoc() }
  q1 -> qf { (result' = 1) && havoc(result)}
  q0 -> q2 { (n > 0) && havoc() }
  q2 -> qf { result' = is_odd(n-1) }
  q0 -> q3 { (n < 0) && havoc() }
  q3 -> qf { result' = is_odd(n+1) }
}

main {
  in x : int;
  out y : int;
  initial q1;
  final q2;
  q1 ->  q2 { y' = is_even(x) && havoc(y) }
}
