nts substring;
 
main{

mid_4_base,mid_4_size,mid_3_base,mid_3_size,mid_2_base,mid_2_size,mid_1_base,mid_1_size,validity____retres_,validity__from_,validity__i_,validity__j_,validity__k_,validity__tmp_,validity__to_,validity__x_,validity__z_,__if_ndet_cond__,_ndet_arg_0,__retres,tmp,k,j,i,to,from : int ;

 out ret_val_, validity__ret_val__  : int;
initial sinit ;
final s33;
error s1,s3,s5,s7,s9,s18,s21,s23,s25,s27,s29,s31; sinit->s0 { mid_4_size'=201*1 and mid_1_size'=101*1 and mid_2_size'=201*1 and mid_3_size'=101*1 } 
 s0->sinter0 { havoc() } 
 sinter0->s2 { (from',validity__from_')=NonDetInt() and havoc(from,validity__from_) } 
 s2->sinter1 { havoc() } 
 sinter1->s4 { (to',validity__to_')=NonDetInt() and havoc(to,validity__to_) } 
 s4->sinter2 { havoc() } 
 sinter2->s6 { (k',validity__k_')=NonDetInt() and havoc(k,validity__k_) } 
 s6->s8 { i'=from and havoc(i) } 
 s8->s10 { j'=0 and havoc(j) } 
 s10->s11 { havoc() } 
 s11->s12 { havoc() } 
 s12->s13 { not (i < 101 and i >= 0) and havoc() } 
 s12->s13 { __if_ndet_cond__ = 0 and (i < 101 and i >= 0) and havoc() } 
 s12->s14 { __if_ndet_cond__ != 0 and (i < 101 and i >= 0) and havoc() } 
 s13->s15 { i < to and havoc() } 
 s13->s16 { i >= to and havoc() } 
 s14->s17 { havoc() } 
 s15->s18 { not (i < 101 and i >= 0) and havoc() } 
 s15->s19 { (j < 201 and j >= 0) and (i < 101 and i >= 0) and havoc() } 
 s16->s17 { havoc() } 
 s17->s20 { k >= 0 and havoc() } 
 s17->s22 { k < 0 and tmp'=0 and havoc(tmp) } 
 s19->s24 { i'=i+1 and havoc(i) } 
 s20->s26 { k < j and tmp'=1 and havoc(tmp) } 
 s20->s28 { k >= j and tmp'=0 and havoc(tmp) } 
 s22->s30 { __retres'=1 and havoc(__retres) } 
 s24->s32 { j'=j+1 and havoc(j) } 
 s26->s30 { __retres'=1 and havoc(__retres) } 
 s28->s30 { __retres'=1 and havoc(__retres) } 
 s30->s33 { ret_val_'=__retres and havoc(ret_val_) } 
 s32->s11 { havoc() }
}
__assert_fail{
in a,b,c,d,e,f,g,h : int;
initial sinit ;
error s0;
sinit->s0 { true and havoc() }
}



NonDetInt{
out ndet, validity_ndet_: int;
initial sinit;
final s1;

sinit->s0{ havoc(ndet,  validity_ndet_)}
s0->s1{havoc()}

}


