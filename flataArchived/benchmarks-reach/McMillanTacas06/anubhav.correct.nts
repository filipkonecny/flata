nts anubhav;
 
main{

validity____retres_,validity__i_,validity__j_,validity__x_,validity__y_,__if_ndet_cond__,_ndet_arg_4,_ndet_arg_3,_ndet_arg_2,_ndet_arg_1,_ndet_arg_0,__retres,y,x,j,i : int ;

 out ret_val_, validity__ret_val__  : int;
initial sinit ;
final s19;
error s1,s3,s9,s12,s15,s17,s18; sinit->s0 {  } 
 s0->s2 { x'=i and havoc(x) } 
 s2->s4 { y'=j and havoc(y) } 
 s4->s5 { havoc() } 
 s5->s6 { havoc() } 
 s6->s7 { x != 0 and havoc() } 
 s6->s8 { x = 0 and havoc() } 
 s7->s10 { x'=x-1 and havoc(x) } 
 s8->s11 { havoc() } 
 s10->s13 { y'=y-1 and havoc(y) } 
 s11->s14 { i = j and havoc() } 
 s11->s16 { i != j and __retres'=0 and havoc(__retres) } 
 s13->s5 { havoc() } 
 s14->s16 { y = 0 and __retres'=0 and havoc(__retres) } 
 s14->sinter0 { y != 0 and havoc(_ndet_arg_1,_ndet_arg_2) } 
 sinter0->s18 { __assert_fail(_ndet_arg_0,1,_ndet_arg_1,1,16,1,_ndet_arg_2,1) and havoc() } 
 s16->s19 { ret_val_'=__retres and havoc(ret_val_) }
}
__assert_fail{
in a,b,c,d,e,f,g,h : int;
initial sinit ;
error s0;
sinit->s0 { true and havoc() }
}



NonDetInt{
out ndet, validity_ndet_: int;
initial sinit;
final s1;

sinit->s0{ havoc(ndet,  validity_ndet_)}
s0->s1{havoc()}

}


