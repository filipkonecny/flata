nts pgm;

// Global Decls
main_without_err, PC2, cmain: int;
CNT_cpost_async1: int;
MI_b__0: int;
MF_b__0: int;

MI_b__1: int;
MF_b__1: int;

main {
b, res: int;
nxt_b: int;
initial si;
final sf;
error se;

si -> s0 { b' >= 0 && b' <= 1 &&  main_without_err' = 0 && PC2' = 0 && cmain' = 0 && CNT_cpost_async1' = 0 && havoc(b, main_without_err, PC2, cmain, CNT_cpost_async1)}
s0 -> s1 { main_without_err' = main_without_err + 1 &&
       MI_b__1' = b && MF_b__1' = nxt_b' &&
	 nxt_b' >= 0 && nxt_b' <= 1 && 
       havoc (main_without_err, MI_b__1, MF_b__1, nxt_b) }
s1 -> s2_1 { res' = traverse_main_without_err_1() && havoc(res) }
s2_1 -> eventloop { res = 1 && res' = 0 && b' = nxt_b &&  havoc(res, b) }

eventloop -> sf { CNT_cpost_async1 = 0 && havoc() }
eventloop -> s3 { CNT_cpost_async1 >= 1 && CNT_cpost_async1' = CNT_cpost_async1 - 1 && havoc(CNT_cpost_async1) }

s3 -> s4 { 
           MI_b__1' = b && MF_b__1' = nxt_b' &&
	 nxt_b' >= 0 && nxt_b' <= 1 && 
           havoc( MI_b__1, MF_b__1, nxt_b) }

s4 -> se_4 { res' = traverse_cpost_async1_with_err_1() && havoc(res) }
se_4 -> se { res = 1 && res' = 0 && b' = nxt_b &&  havoc(res, b) }

s3 -> s5 { 
           MI_b__1' = b && MF_b__1' = nxt_b' &&
	 nxt_b' >= 0 && nxt_b' <= 1 && 
           havoc( MI_b__1, MF_b__1, nxt_b) }

s5 -> s2_5 { res' = traverse_cpost_async1_without_err_1() && havoc(res) }
s2_5 -> eventloop { b' = nxt_b &&  havoc(b) }

}

//----------------------------------
// Grammar of main_without_err
// <PC2> -> 'e'
// <PC20> -> 'cpost_async1' <PC23>
// <PC23> -> 'e'
// <cmain> -> 'b := T' <PC20>
// <main_without_err> -> <cmain> <PC2>
//----------------------------------
traverse_main_without_err_0 {
res: int;
out done: int;
initial si;
final sf;

si -> p0 { PC2 >= 1 && havoc() }
si -> p3 { cmain >= 1 && havoc() }
si -> p4 { main_without_err >= 1 && havoc() }


// <PC2> -> 'e'
p0 -> sf { PC2' = PC2 - 1 && done' = 1 &&
       	MI_b__0 = MF_b__0 && 
       	havoc(PC2, done) }

// <PC20> -> 'cpost_async1' <PC23>
p1 -> p2 { CNT_cpost_async1' = CNT_cpost_async1 + 1  &&  
        havoc(CNT_cpost_async1) }

// <PC23> -> 'e'
p2 -> sf {  done' = 1 &&
       	MI_b__0 = MF_b__0 && 
       	havoc(done) }

// <cmain> -> 'b := T' <PC20>
p3 -> p1 { MI_b__0' = 1 && cmain' = cmain - 1 && 
        havoc(MI_b__0, cmain) }

// <main_without_err> -> <cmain> <PC2> 
p4 -> p4_0 {0 >= 1 &&
        MF_b__0' = MF_b__0 && MF_b__0' = MI_b__0' &&
	 MI_b__0' >= 0 && MI_b__0' <= 1 && 
        main_without_err' = main_without_err - 1 && PC2' = PC2 + 1 &&
        havoc(MF_b__0, MF_b__0, MI_b__0,  main_without_err, PC2) }

p4_0 -> si4_0 { res' = 1 && havoc(res) }

si4_0 -> p3 { res = 1 && res' = 0 && cmain' = cmain + 1 && 
        havoc(res, cmain) }

p4 -> p4_1 {0 >= 1 &&
        MI_b__0' = MI_b__0 && MI_b__0' = MF_b__0' &&
	 MF_b__0' >= 0 && MF_b__0' <= 1 && 
        main_without_err' = main_without_err - 1 && cmain' = cmain + 1 &&
        havoc(MI_b__0, MI_b__0, MF_b__0,  main_without_err, cmain) }

p4_1 -> si4_1 { res' = 1 &&  havoc(res) }

si4_1 -> p0 { res = 1 && res' = 0 && PC2' = PC2 + 1 &&
        havoc(res, PC2) }


}

//----------------------------------
// Grammar of main_without_err
// <PC2> -> 'e'
// <PC20> -> 'cpost_async1' <PC23>
// <PC23> -> 'e'
// <cmain> -> 'b := T' <PC20>
// <main_without_err> -> <cmain> <PC2>
//----------------------------------
traverse_main_without_err_1 {
res: int;
out done: int;
initial si;
final sf;

si -> p0 { PC2 >= 1 && havoc() }
si -> p3 { cmain >= 1 && havoc() }
si -> p4 { main_without_err >= 1 && havoc() }


// <PC2> -> 'e'
p0 -> sf { PC2' = PC2 - 1 && done' = 1 &&
       	MI_b__1 = MF_b__1 && 
       	havoc(PC2, done) }

// <PC20> -> 'cpost_async1' <PC23>
p1 -> p2 { CNT_cpost_async1' = CNT_cpost_async1 + 1  &&  
        havoc(CNT_cpost_async1) }

// <PC23> -> 'e'
p2 -> sf {  done' = 1 &&
       	MI_b__1 = MF_b__1 && 
       	havoc(done) }

// <cmain> -> 'b := T' <PC20>
p3 -> p1 { MI_b__1' = 1 && cmain' = cmain - 1 && 
        havoc(MI_b__1, cmain) }

// <main_without_err> -> <cmain> <PC2> 
p4 -> p4_0 {1 >= 1 &&
        MF_b__0' = MF_b__1 && MF_b__1' = MI_b__0' &&
	 MI_b__0' >= 0 && MI_b__0' <= 1 && 
        main_without_err' = main_without_err - 1 && PC2' = PC2 + 1 &&
        havoc(MF_b__0, MF_b__1, MI_b__0,  main_without_err, PC2) }

p4_0 -> si4_0 { res' = traverse_main_without_err_0() && havoc(res) }

si4_0 -> p3 { res = 1 && res' = 0 && cmain' = cmain + 1 && 
        havoc(res, cmain) }

p4 -> p4_1 {1 >= 1 &&
        MI_b__0' = MI_b__1 && MI_b__1' = MF_b__0' &&
	 MF_b__0' >= 0 && MF_b__0' <= 1 && 
        main_without_err' = main_without_err - 1 && cmain' = cmain + 1 &&
        havoc(MI_b__0, MI_b__1, MF_b__0,  main_without_err, cmain) }

p4_1 -> si4_1 { res' = traverse_main_without_err_0() &&  havoc(res) }

si4_1 -> p0 { res = 1 && res' = 0 && PC2' = PC2 + 1 &&
        havoc(res, PC2) }


}

//----------------------------------
// Grammar of cpost_async1_with_err
// <END_l1_prime_END> -> 'e'
// <INIT_PC11_prime_END> -> 'assert (F)'
// <INIT_PC11_prime_END> -> 'assert (F)' <END_l1_prime_END>
// <cpost_async1_with_err> -> 'assert(b)' <INIT_PC11_prime_END>
//----------------------------------
traverse_cpost_async1_with_err_0 {
res: int;
out done: int;
initial p2;
final sf;



// <END_l1_prime_END> -> 'e'
p0 -> sf {  done' = 1 &&
       	MI_b__0 = MF_b__0 && 
       	havoc(done) }

// <INIT_PC11_prime_END> -> 'assert (F)'
p1 -> sf { 1 = 1 &&  done' = 1 && MI_b__0 = MF_b__0 && 
        havoc(done) }

// <INIT_PC11_prime_END> -> 'assert (F)' <END_l1_prime_END>
p1 -> p0 { 1 = 1 &&  
        havoc() }

// <cpost_async1_with_err> -> 'assert(b)' <INIT_PC11_prime_END>
p2 -> p1 { MI_b__0 = 1 &&  
        havoc() }


}

//----------------------------------
// Grammar of cpost_async1_with_err
// <END_l1_prime_END> -> 'e'
// <INIT_PC11_prime_END> -> 'assert (F)'
// <INIT_PC11_prime_END> -> 'assert (F)' <END_l1_prime_END>
// <cpost_async1_with_err> -> 'assert(b)' <INIT_PC11_prime_END>
//----------------------------------
traverse_cpost_async1_with_err_1 {
res: int;
out done: int;
initial p2;
final sf;



// <END_l1_prime_END> -> 'e'
p0 -> sf {  done' = 1 &&
       	MI_b__1 = MF_b__1 && 
       	havoc(done) }

// <INIT_PC11_prime_END> -> 'assert (F)'
p1 -> sf { 1 = 1 &&  done' = 1 && MI_b__1 = MF_b__1 && 
        havoc(done) }

// <INIT_PC11_prime_END> -> 'assert (F)' <END_l1_prime_END>
p1 -> p0 { 1 = 1 &&  
        havoc() }

// <cpost_async1_with_err> -> 'assert(b)' <INIT_PC11_prime_END>
p2 -> p1 { MI_b__1 = 1 &&  
        havoc() }


}

//----------------------------------
// Grammar of cpost_async1_without_err
// <PC13> -> 'b := F' <PC14>
// <PC14> -> 'e'
// <cpost_async1_without_err> -> 'assert(!b)' <l1>
// <l1> -> 'cpost_async1' <PC13>
//----------------------------------
traverse_cpost_async1_without_err_0 {
res: int;
out done: int;
initial p2;
final sf;



// <PC13> -> 'b := F' <PC14>
p0 -> p1 { MI_b__0' = 0 &&  
        havoc(MI_b__0) }

// <PC14> -> 'e'
p1 -> sf {  done' = 1 &&
       	MI_b__0 = MF_b__0 && 
       	havoc(done) }

// <cpost_async1_without_err> -> 'assert(!b)' <l1>
p2 -> p3 { MI_b__0 = 0 &&  
        havoc() }

// <l1> -> 'cpost_async1' <PC13>
p3 -> p0 { CNT_cpost_async1' = CNT_cpost_async1 + 1  &&  
        havoc(CNT_cpost_async1) }


}

//----------------------------------
// Grammar of cpost_async1_without_err
// <PC13> -> 'b := F' <PC14>
// <PC14> -> 'e'
// <cpost_async1_without_err> -> 'assert(!b)' <l1>
// <l1> -> 'cpost_async1' <PC13>
//----------------------------------
traverse_cpost_async1_without_err_1 {
res: int;
out done: int;
initial p2;
final sf;



// <PC13> -> 'b := F' <PC14>
p0 -> p1 { MI_b__1' = 0 &&  
        havoc(MI_b__1) }

// <PC14> -> 'e'
p1 -> sf {  done' = 1 &&
       	MI_b__1 = MF_b__1 && 
       	havoc(done) }

// <cpost_async1_without_err> -> 'assert(!b)' <l1>
p2 -> p3 { MI_b__1 = 0 &&  
        havoc() }

// <l1> -> 'cpost_async1' <PC13>
p3 -> p0 { CNT_cpost_async1' = CNT_cpost_async1 + 1  &&  
        havoc(CNT_cpost_async1) }


}


