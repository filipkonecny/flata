nts pgm;

// Global Decls
END_l1_prime_END, INIT_PC17_prime_END, PC13, PC14, PC15, PC2, PC20, PC21, PC23, PC24, PC25, cmain, cpost_async1_without_err, cpost_async2_with_err, cpost_async2_without_err, l1, l2, main_without_err: int;
CNT_cpost_async1, CNT_cpost_async2: int;
MI_b0_x_eq_y__0: int;
MF_b0_x_eq_y__0: int;

MI_b0_x_eq_y__1: int;
MF_b0_x_eq_y__1: int;

main {
b0_x_eq_y, res: int;
nxt_b0_x_eq_y: int;
initial si;
final sf;
error se;

si -> s0 { b0_x_eq_y' >= 0 && b0_x_eq_y' <= 1 &&  END_l1_prime_END' = 0 && INIT_PC17_prime_END' = 0 && PC13' = 0 && PC14' = 0 && PC15' = 0 && PC2' = 0 && PC20' = 0 && PC21' = 0 && PC23' = 0 && PC24' = 0 && PC25' = 0 && cmain' = 0 && cpost_async1_without_err' = 0 && cpost_async2_with_err' = 0 && cpost_async2_without_err' = 0 && l1' = 0 && l2' = 0 && main_without_err' = 0 && CNT_cpost_async1' = 0 && CNT_cpost_async2' = 0 && havoc(b0_x_eq_y, END_l1_prime_END, INIT_PC17_prime_END, PC13, PC14, PC15, PC2, PC20, PC21, PC23, PC24, PC25, cmain, cpost_async1_without_err, cpost_async2_with_err, cpost_async2_without_err, l1, l2, main_without_err, CNT_cpost_async1, CNT_cpost_async2)}
s0 -> s1 { main_without_err' = main_without_err + 1 &&
       MI_b0_x_eq_y__1' = b0_x_eq_y && MF_b0_x_eq_y__1' = nxt_b0_x_eq_y' && nxt_b0_x_eq_y' >= 0 && nxt_b0_x_eq_y' <= 1 && 
       havoc (main_without_err, MI_b0_x_eq_y__1, MF_b0_x_eq_y__1, nxt_b0_x_eq_y) }
s1 -> s2_1 { res' = traverse_main_without_err_1() && havoc(res) }
s2_1 -> eventloop { res = 1 && res' = 0 && b0_x_eq_y' = nxt_b0_x_eq_y &&  havoc(res, b0_x_eq_y) }

eventloop -> sf { CNT_cpost_async1 = 0 && CNT_cpost_async2 = 0 && havoc() }
eventloop -> s3 { CNT_cpost_async1 >= 1 && CNT_cpost_async1' = CNT_cpost_async1 - 1 && havoc(CNT_cpost_async1) }

s3 -> s5 { cpost_async1_without_err' = cpost_async1_without_err + 1 &&
           MI_b0_x_eq_y__1' = b0_x_eq_y && MF_b0_x_eq_y__1' = nxt_b0_x_eq_y' && nxt_b0_x_eq_y' >= 0 && nxt_b0_x_eq_y' <= 1 && 
           havoc(cpost_async1_without_err, MI_b0_x_eq_y__1, MF_b0_x_eq_y__1, nxt_b0_x_eq_y) }

s5 -> s2_5 { res' = traverse_cpost_async1_without_err_1() && havoc(res) }
s2_5 -> eventloop { b0_x_eq_y' = nxt_b0_x_eq_y &&  havoc(b0_x_eq_y) }

eventloop -> s6 { CNT_cpost_async2 >= 1 && CNT_cpost_async2' = CNT_cpost_async2 - 1 && havoc(CNT_cpost_async2) }

s6 -> s7 { cpost_async2_with_err' = cpost_async2_with_err + 1 &&
           MI_b0_x_eq_y__1' = b0_x_eq_y && MF_b0_x_eq_y__1' = nxt_b0_x_eq_y' && nxt_b0_x_eq_y' >= 0 && nxt_b0_x_eq_y' <= 1 && 
           havoc(cpost_async2_with_err, MI_b0_x_eq_y__1, MF_b0_x_eq_y__1, nxt_b0_x_eq_y) }

s7 -> se_7 { res' = traverse_cpost_async2_with_err_1() && havoc(res) }
se_7 -> se { res = 1 && res' = 0 && b0_x_eq_y' = nxt_b0_x_eq_y &&  havoc(res, b0_x_eq_y) }

s6 -> s8 { cpost_async2_without_err' = cpost_async2_without_err + 1 &&
           MI_b0_x_eq_y__1' = b0_x_eq_y && MF_b0_x_eq_y__1' = nxt_b0_x_eq_y' && nxt_b0_x_eq_y' >= 0 && nxt_b0_x_eq_y' <= 1 && 
           havoc(cpost_async2_without_err, MI_b0_x_eq_y__1, MF_b0_x_eq_y__1, nxt_b0_x_eq_y) }

s8 -> s2_8 { res' = traverse_cpost_async2_without_err_1() && havoc(res) }
s2_8 -> eventloop { b0_x_eq_y' = nxt_b0_x_eq_y &&  havoc(b0_x_eq_y) }

}

//----------------------------------
// Grammar of main_without_err
// <PC2> -> 'e'
// <PC20> -> 'cpost_async1' <PC21>
// <PC21> -> 'assert(!*)' <PC20>
// <PC21> -> 'assert(*)' <l2>
// <PC23> -> 'b0_x_eq_y := T' <PC24>
// <PC24> -> 'assert (T)' <PC25>
// <PC25> -> 'e'
// <cmain> -> 'assert(!*)' <PC20>
// <cmain> -> 'assert(*)' <l2>
// <l2> -> 'b0_x_eq_y := schoose [T, F]' <PC23>
// <main_without_err> -> <cmain> <PC2>
//----------------------------------
traverse_main_without_err_0 {
res: int;
out done: int;
initial si;
final sf;

si -> p0 { PC2 >= 1 && havoc() }
si -> p1 { PC20 >= 1 && havoc() }
si -> p2 { PC21 >= 1 && havoc() }
si -> p3 { PC23 >= 1 && havoc() }
si -> p4 { PC24 >= 1 && havoc() }
si -> p5 { PC25 >= 1 && havoc() }
si -> p6 { cmain >= 1 && havoc() }
si -> p7 { l2 >= 1 && havoc() }
si -> p8 { main_without_err >= 1 && havoc() }


// <PC2> -> 'e'
p0 -> sf { PC2' = PC2 - 1 && done' = 1 &&
       	MI_b0_x_eq_y__0 = MF_b0_x_eq_y__0 && 
       	havoc(PC2, done) }

// <PC20> -> 'cpost_async1' <PC21>
p1 -> p2 { CNT_cpost_async1' = CNT_cpost_async1 + 1  && PC20' = PC20 - 1 && PC21' = PC21 + 1 &&
        havoc(CNT_cpost_async1, PC20, PC21) }

// <PC21> -> 'assert(!*)' <PC20>
p2 -> p1 { 1 = 1 && PC21' = PC21 - 1 && PC20' = PC20 + 1 &&
        havoc(PC21, PC20) }

// <PC21> -> 'assert(*)' <l2>
p2 -> p7 { 1 = 1 && PC21' = PC21 - 1 && l2' = l2 + 1 &&
        havoc(PC21, l2) }

// <PC23> -> 'b0_x_eq_y := T' <PC24>
p3 -> p4 { MI_b0_x_eq_y__0' = 1 && PC23' = PC23 - 1 && PC24' = PC24 + 1 &&
        havoc(MI_b0_x_eq_y__0, PC23, PC24) }

// <PC24> -> 'assert (T)' <PC25>
p4 -> p5 { 1 = 1 && PC24' = PC24 - 1 && PC25' = PC25 + 1 &&
        havoc(PC24, PC25) }

// <PC25> -> 'e'
p5 -> sf { PC25' = PC25 - 1 && done' = 1 &&
       	MI_b0_x_eq_y__0 = MF_b0_x_eq_y__0 && 
       	havoc(PC25, done) }

// <cmain> -> 'assert(!*)' <PC20>
p6 -> p1 { 1 = 1 && cmain' = cmain - 1 && PC20' = PC20 + 1 &&
        havoc(cmain, PC20) }

// <cmain> -> 'assert(*)' <l2>
p6 -> p7 { 1 = 1 && cmain' = cmain - 1 && l2' = l2 + 1 &&
        havoc(cmain, l2) }

// <l2> -> 'b0_x_eq_y := schoose [T, F]' <PC23>
p7 -> p3 { 1 = 1 && l2' = l2 - 1 && PC23' = PC23 + 1 &&
        havoc(l2, PC23) }

// <main_without_err> -> <cmain> <PC2> 
p8 -> p8_0 {0 >= 1 &&
        MF_b0_x_eq_y__0' = MF_b0_x_eq_y__0 && MF_b0_x_eq_y__0' = MI_b0_x_eq_y__0' && MI_b0_x_eq_y__0' >= 0 && MI_b0_x_eq_y__0' <= 1 && 
        main_without_err' = main_without_err - 1 && PC2' = PC2 + 1 &&
        havoc(MF_b0_x_eq_y__0, MF_b0_x_eq_y__0, MI_b0_x_eq_y__0,  main_without_err, PC2) }

p8_0 -> si8_0 { res' = 1 && havoc(res) }

si8_0 -> p6 { res = 1 && res' = 0 && cmain' = cmain + 1 && 
        havoc(res, cmain) }

p8 -> p8_1 {0 >= 1 &&
        MI_b0_x_eq_y__0' = MI_b0_x_eq_y__0 && MI_b0_x_eq_y__0' = MF_b0_x_eq_y__0' && MF_b0_x_eq_y__0' >= 0 && MF_b0_x_eq_y__0' <= 1 && 
        main_without_err' = main_without_err - 1 && cmain' = cmain + 1 &&
        havoc(MI_b0_x_eq_y__0, MI_b0_x_eq_y__0, MF_b0_x_eq_y__0,  main_without_err, cmain) }

p8_1 -> si8_1 { res' = 1 &&  havoc(res) }

si8_1 -> p0 { res = 1 && res' = 0 && PC2' = PC2 + 1 &&
        havoc(res, PC2) }


}

//----------------------------------
// Grammar of main_without_err
// <PC2> -> 'e'
// <PC20> -> 'cpost_async1' <PC21>
// <PC21> -> 'assert(!*)' <PC20>
// <PC21> -> 'assert(*)' <l2>
// <PC23> -> 'b0_x_eq_y := T' <PC24>
// <PC24> -> 'assert (T)' <PC25>
// <PC25> -> 'e'
// <cmain> -> 'assert(!*)' <PC20>
// <cmain> -> 'assert(*)' <l2>
// <l2> -> 'b0_x_eq_y := schoose [T, F]' <PC23>
// <main_without_err> -> <cmain> <PC2>
//----------------------------------
traverse_main_without_err_1 {
res: int;
out done: int;
initial si;
final sf;

si -> p0 { PC2 >= 1 && havoc() }
si -> p1 { PC20 >= 1 && havoc() }
si -> p2 { PC21 >= 1 && havoc() }
si -> p3 { PC23 >= 1 && havoc() }
si -> p4 { PC24 >= 1 && havoc() }
si -> p5 { PC25 >= 1 && havoc() }
si -> p6 { cmain >= 1 && havoc() }
si -> p7 { l2 >= 1 && havoc() }
si -> p8 { main_without_err >= 1 && havoc() }


// <PC2> -> 'e'
p0 -> sf { PC2' = PC2 - 1 && done' = 1 &&
       	MI_b0_x_eq_y__1 = MF_b0_x_eq_y__1 && 
       	havoc(PC2, done) }

// <PC20> -> 'cpost_async1' <PC21>
p1 -> p2 { CNT_cpost_async1' = CNT_cpost_async1 + 1  && PC20' = PC20 - 1 && PC21' = PC21 + 1 &&
        havoc(CNT_cpost_async1, PC20, PC21) }

// <PC21> -> 'assert(!*)' <PC20>
p2 -> p1 { 1 = 1 && PC21' = PC21 - 1 && PC20' = PC20 + 1 &&
        havoc(PC21, PC20) }

// <PC21> -> 'assert(*)' <l2>
p2 -> p7 { 1 = 1 && PC21' = PC21 - 1 && l2' = l2 + 1 &&
        havoc(PC21, l2) }

// <PC23> -> 'b0_x_eq_y := T' <PC24>
p3 -> p4 { MI_b0_x_eq_y__1' = 1 && PC23' = PC23 - 1 && PC24' = PC24 + 1 &&
        havoc(MI_b0_x_eq_y__1, PC23, PC24) }

// <PC24> -> 'assert (T)' <PC25>
p4 -> p5 { 1 = 1 && PC24' = PC24 - 1 && PC25' = PC25 + 1 &&
        havoc(PC24, PC25) }

// <PC25> -> 'e'
p5 -> sf { PC25' = PC25 - 1 && done' = 1 &&
       	MI_b0_x_eq_y__1 = MF_b0_x_eq_y__1 && 
       	havoc(PC25, done) }

// <cmain> -> 'assert(!*)' <PC20>
p6 -> p1 { 1 = 1 && cmain' = cmain - 1 && PC20' = PC20 + 1 &&
        havoc(cmain, PC20) }

// <cmain> -> 'assert(*)' <l2>
p6 -> p7 { 1 = 1 && cmain' = cmain - 1 && l2' = l2 + 1 &&
        havoc(cmain, l2) }

// <l2> -> 'b0_x_eq_y := schoose [T, F]' <PC23>
p7 -> p3 { 1 = 1 && l2' = l2 - 1 && PC23' = PC23 + 1 &&
        havoc(l2, PC23) }

// <main_without_err> -> <cmain> <PC2> 
p8 -> p8_0 {1 >= 1 &&
        MF_b0_x_eq_y__0' = MF_b0_x_eq_y__1 && MF_b0_x_eq_y__1' = MI_b0_x_eq_y__0' && MI_b0_x_eq_y__0' >= 0 && MI_b0_x_eq_y__0' <= 1 && 
        main_without_err' = main_without_err - 1 && PC2' = PC2 + 1 &&
        havoc(MF_b0_x_eq_y__0, MF_b0_x_eq_y__1, MI_b0_x_eq_y__0,  main_without_err, PC2) }

p8_0 -> si8_0 { res' = traverse_main_without_err_0() && havoc(res) }

si8_0 -> p6 { res = 1 && res' = 0 && cmain' = cmain + 1 && 
        havoc(res, cmain) }

p8 -> p8_1 {1 >= 1 &&
        MI_b0_x_eq_y__0' = MI_b0_x_eq_y__1 && MI_b0_x_eq_y__1' = MF_b0_x_eq_y__0' && MF_b0_x_eq_y__0' >= 0 && MF_b0_x_eq_y__0' <= 1 && 
        main_without_err' = main_without_err - 1 && cmain' = cmain + 1 &&
        havoc(MI_b0_x_eq_y__0, MI_b0_x_eq_y__1, MF_b0_x_eq_y__0,  main_without_err, cmain) }

p8_1 -> si8_1 { res' = traverse_main_without_err_0() &&  havoc(res) }

si8_1 -> p0 { res = 1 && res' = 0 && PC2' = PC2 + 1 &&
        havoc(res, PC2) }


}

//----------------------------------
// Grammar of cpost_async1_without_err
// <PC13> -> 'b0_x_eq_y := (!b0_x_eq_y)' <PC14>
// <PC14> -> 'b0_x_eq_y := (!b0_x_eq_y)' <PC15>
// <PC15> -> 'e'
// <cpost_async1_without_err> -> 'cpost_async2' <PC13>
//----------------------------------
traverse_cpost_async1_without_err_0 {
res: int;
out done: int;
initial si;
final sf;

si -> p0 { PC13 >= 1 && havoc() }
si -> p1 { PC14 >= 1 && havoc() }
si -> p2 { PC15 >= 1 && havoc() }
si -> p3 { cpost_async1_without_err >= 1 && havoc() }


// <PC13> -> 'b0_x_eq_y := (!b0_x_eq_y)' <PC14>
p0 -> p1 { MI_b0_x_eq_y__0' = 1 - MI_b0_x_eq_y__0 && PC13' = PC13 - 1 && PC14' = PC14 + 1 &&
        havoc(MI_b0_x_eq_y__0, PC13, PC14) }

// <PC14> -> 'b0_x_eq_y := (!b0_x_eq_y)' <PC15>
p1 -> p2 { MI_b0_x_eq_y__0' = 1 - MI_b0_x_eq_y__0 && PC14' = PC14 - 1 && PC15' = PC15 + 1 &&
        havoc(MI_b0_x_eq_y__0, PC14, PC15) }

// <PC15> -> 'e'
p2 -> sf { PC15' = PC15 - 1 && done' = 1 &&
       	MI_b0_x_eq_y__0 = MF_b0_x_eq_y__0 && 
       	havoc(PC15, done) }

// <cpost_async1_without_err> -> 'cpost_async2' <PC13>
p3 -> p0 { CNT_cpost_async2' = CNT_cpost_async2 + 1  && cpost_async1_without_err' = cpost_async1_without_err - 1 && PC13' = PC13 + 1 &&
        havoc(CNT_cpost_async2, cpost_async1_without_err, PC13) }


}

//----------------------------------
// Grammar of cpost_async1_without_err
// <PC13> -> 'b0_x_eq_y := (!b0_x_eq_y)' <PC14>
// <PC14> -> 'b0_x_eq_y := (!b0_x_eq_y)' <PC15>
// <PC15> -> 'e'
// <cpost_async1_without_err> -> 'cpost_async2' <PC13>
//----------------------------------
traverse_cpost_async1_without_err_1 {
res: int;
out done: int;
initial si;
final sf;

si -> p0 { PC13 >= 1 && havoc() }
si -> p1 { PC14 >= 1 && havoc() }
si -> p2 { PC15 >= 1 && havoc() }
si -> p3 { cpost_async1_without_err >= 1 && havoc() }


// <PC13> -> 'b0_x_eq_y := (!b0_x_eq_y)' <PC14>
p0 -> p1 { MI_b0_x_eq_y__1' = 1 - MI_b0_x_eq_y__1 && PC13' = PC13 - 1 && PC14' = PC14 + 1 &&
        havoc(MI_b0_x_eq_y__1, PC13, PC14) }

// <PC14> -> 'b0_x_eq_y := (!b0_x_eq_y)' <PC15>
p1 -> p2 { MI_b0_x_eq_y__1' = 1 - MI_b0_x_eq_y__1 && PC14' = PC14 - 1 && PC15' = PC15 + 1 &&
        havoc(MI_b0_x_eq_y__1, PC14, PC15) }

// <PC15> -> 'e'
p2 -> sf { PC15' = PC15 - 1 && done' = 1 &&
       	MI_b0_x_eq_y__1 = MF_b0_x_eq_y__1 && 
       	havoc(PC15, done) }

// <cpost_async1_without_err> -> 'cpost_async2' <PC13>
p3 -> p0 { CNT_cpost_async2' = CNT_cpost_async2 + 1  && cpost_async1_without_err' = cpost_async1_without_err - 1 && PC13' = PC13 + 1 &&
        havoc(CNT_cpost_async2, cpost_async1_without_err, PC13) }


}

//----------------------------------
// Grammar of cpost_async2_with_err
// <END_l1_prime_END> -> 'e'
// <INIT_PC17_prime_END> -> 'assert (F)'
// <INIT_PC17_prime_END> -> 'assert (F)' <END_l1_prime_END>
// <cpost_async2_with_err> -> 'assert(!b0_x_eq_y)' <INIT_PC17_prime_END>
//----------------------------------
traverse_cpost_async2_with_err_0 {
res: int;
out done: int;
initial si;
final sf;

si -> p0 { END_l1_prime_END >= 1 && havoc() }
si -> p1 { INIT_PC17_prime_END >= 1 && havoc() }
si -> p2 { cpost_async2_with_err >= 1 && havoc() }


// <END_l1_prime_END> -> 'e'
p0 -> sf { END_l1_prime_END' = END_l1_prime_END - 1 && done' = 1 &&
       	MI_b0_x_eq_y__0 = MF_b0_x_eq_y__0 && 
       	havoc(END_l1_prime_END, done) }

// <INIT_PC17_prime_END> -> 'assert (F)'
p1 -> sf { 1 = 1 && INIT_PC17_prime_END' = INIT_PC17_prime_END - 1 && done' = 1 &&
        MI_b0_x_eq_y__0 = MF_b0_x_eq_y__0 && 
        havoc(INIT_PC17_prime_END, done) }

// <INIT_PC17_prime_END> -> 'assert (F)' <END_l1_prime_END>
p1 -> p0 { 1 = 1 && INIT_PC17_prime_END' = INIT_PC17_prime_END - 1 && END_l1_prime_END' = END_l1_prime_END + 1 &&
        havoc(INIT_PC17_prime_END, END_l1_prime_END) }

// <cpost_async2_with_err> -> 'assert(!b0_x_eq_y)' <INIT_PC17_prime_END>
p2 -> p1 { MI_b0_x_eq_y__0 = 0 && cpost_async2_with_err' = cpost_async2_with_err - 1 && INIT_PC17_prime_END' = INIT_PC17_prime_END + 1 &&
        havoc(cpost_async2_with_err, INIT_PC17_prime_END) }


}

//----------------------------------
// Grammar of cpost_async2_with_err
// <END_l1_prime_END> -> 'e'
// <INIT_PC17_prime_END> -> 'assert (F)'
// <INIT_PC17_prime_END> -> 'assert (F)' <END_l1_prime_END>
// <cpost_async2_with_err> -> 'assert(!b0_x_eq_y)' <INIT_PC17_prime_END>
//----------------------------------
traverse_cpost_async2_with_err_1 {
res: int;
out done: int;
initial si;
final sf;

si -> p0 { END_l1_prime_END >= 1 && havoc() }
si -> p1 { INIT_PC17_prime_END >= 1 && havoc() }
si -> p2 { cpost_async2_with_err >= 1 && havoc() }


// <END_l1_prime_END> -> 'e'
p0 -> sf { END_l1_prime_END' = END_l1_prime_END - 1 && done' = 1 &&
       	MI_b0_x_eq_y__1 = MF_b0_x_eq_y__1 && 
       	havoc(END_l1_prime_END, done) }

// <INIT_PC17_prime_END> -> 'assert (F)'
p1 -> sf { 1 = 1 && INIT_PC17_prime_END' = INIT_PC17_prime_END - 1 && done' = 1 &&
        MI_b0_x_eq_y__1 = MF_b0_x_eq_y__1 && 
        havoc(INIT_PC17_prime_END, done) }

// <INIT_PC17_prime_END> -> 'assert (F)' <END_l1_prime_END>
p1 -> p0 { 1 = 1 && INIT_PC17_prime_END' = INIT_PC17_prime_END - 1 && END_l1_prime_END' = END_l1_prime_END + 1 &&
        havoc(INIT_PC17_prime_END, END_l1_prime_END) }

// <cpost_async2_with_err> -> 'assert(!b0_x_eq_y)' <INIT_PC17_prime_END>
p2 -> p1 { MI_b0_x_eq_y__1 = 0 && cpost_async2_with_err' = cpost_async2_with_err - 1 && INIT_PC17_prime_END' = INIT_PC17_prime_END + 1 &&
        havoc(cpost_async2_with_err, INIT_PC17_prime_END) }


}

//----------------------------------
// Grammar of cpost_async2_without_err
// <cpost_async2_without_err> -> 'assert(b0_x_eq_y)' <l1>
// <l1> -> 'e'
//----------------------------------
traverse_cpost_async2_without_err_0 {
res: int;
out done: int;
initial si;
final sf;

si -> p0 { cpost_async2_without_err >= 1 && havoc() }
si -> p1 { l1 >= 1 && havoc() }


// <cpost_async2_without_err> -> 'assert(b0_x_eq_y)' <l1>
p0 -> p1 { MI_b0_x_eq_y__0 = 1 && cpost_async2_without_err' = cpost_async2_without_err - 1 && l1' = l1 + 1 &&
        havoc(cpost_async2_without_err, l1) }

// <l1> -> 'e'
p1 -> sf { l1' = l1 - 1 && done' = 1 &&
       	MI_b0_x_eq_y__0 = MF_b0_x_eq_y__0 && 
       	havoc(l1, done) }


}

//----------------------------------
// Grammar of cpost_async2_without_err
// <cpost_async2_without_err> -> 'assert(b0_x_eq_y)' <l1>
// <l1> -> 'e'
//----------------------------------
traverse_cpost_async2_without_err_1 {
res: int;
out done: int;
initial si;
final sf;

si -> p0 { cpost_async2_without_err >= 1 && havoc() }
si -> p1 { l1 >= 1 && havoc() }


// <cpost_async2_without_err> -> 'assert(b0_x_eq_y)' <l1>
p0 -> p1 { MI_b0_x_eq_y__1 = 1 && cpost_async2_without_err' = cpost_async2_without_err - 1 && l1' = l1 + 1 &&
        havoc(cpost_async2_without_err, l1) }

// <l1> -> 'e'
p1 -> sf { l1' = l1 - 1 && done' = 1 &&
       	MI_b0_x_eq_y__1 = MF_b0_x_eq_y__1 && 
       	havoc(l1, done) }


}


